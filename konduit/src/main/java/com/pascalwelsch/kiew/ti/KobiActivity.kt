/*
 * Copyright (C) 2017 Pascal Welsch
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.pascalwelsch.konduit.ti

import android.view.View
import android.view.ViewGroup
import com.pascalwelsch.konduit.android.AndroidViewRenderer
import com.pascalwelsch.konduit.widget.Widget
import net.grandcentrix.thirtyinch.TiActivity
import java.lang.IllegalStateException

/**
 * Automatically binds [Widget]s generated by [KonduitPresenter.build] function to android views when the [Widget.key] matches the [View.getId]
 */
abstract class KonduitActivity<P : KonduitPresenter<V>, V : BoundView> : TiActivity<P, V>(), BoundView, KonduitUI {

    @Suppress("MemberVisibilityCanPrivate")
    protected val renderer by lazy { AndroidViewRenderer(this@KonduitActivity, this@KonduitActivity) }

    override fun getBuildContext(): BuildContext {
        return renderer.getBuildContext()
    }

    override fun render(widgets: List<Widget>) {
        renderer.render(widgets)
    }

    /**
     * called before [onStart] to bind all views. Override this method to change the default binding behaviour
     */
    open protected fun onBindAllViews() {
        renderer.autobindAllViews(window.decorView)
    }

    override fun onStart() {
        // bind all views (by default) which will become visible soon
        onBindAllViews()
        super.onStart()
    }

    override fun onWidgetAdded(widget: Widget) {
    }

    override fun onWidgetRemoved(widget: Widget) {
        widget.androidView()?.visibility = View.GONE
    }

    /**
     * returns the android view when a key is set
     */
    private fun Widget.androidView(parent: ViewGroup = window.decorView as ViewGroup): View? {
        val viewId = key
        if (viewId is Int) {
            if (viewId > 0) {
                return parent.findViewById(viewId) ?: throw IllegalStateException(
                        "View (id=$viewId) not found to bind widget $this. " +
                                "Make sure the view was created in onWidgetAdded(Widget)")
            }
        }
        return null
    }

}


interface KonduitUI {
    /**
     * called for every new Widget which was added. This is where you have to add a
     * View and register a binding for it. When the view already exists since [onCreate]
     * the view already has all bindings registered
     */
    fun onWidgetAdded(widget: Widget)

    /**
     * the [Widget] was removed. Make sure that the bound view will be removed, too.
     * The view wont receive any binding updates until the [Widget] will be added again [onWidgetAdded]
     */
    fun onWidgetRemoved(widget: Widget)
}